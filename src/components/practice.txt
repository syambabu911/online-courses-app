
#circular animation login


import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import '../cssfolder/loginform.css'; // Make sure this import is correct for your setup

const LoginScreen = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (event) => {
    event.preventDefault();
    const response = await fetch('http://127.0.0.1:8000/login/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ username: email, password: password }),
    });
    const data = await response.json();
    if (data.status === 'success') {
      navigate('/home');
    } else {
      alert(data.message);
    }
  };

  const handleRegister = () => {
    navigate('/register');
  };

  const handleReset = () => {
    navigate('/reset');
  };

  const handleWithOtp = () => {
    navigate('/sendotp');
  };

  return (
    <div className="container" id="maincont">
      <div className="login-box">
        <h1>Vcube</h1>
        <form onSubmit={handleLogin}>
          <div className="input-box">
            <input
              type="text"
              id="email"
              name="email"
              required
              value={email}
              onChange={(event) => setEmail(event.target.value)}
            />
            <label htmlFor="email">Email / Phone Number:</label>
          </div>
          <div className="input-box">
            <input
              type="password"
              id="password"
              name="password"
              required
              value={password}
              onChange={(event) => setPassword(event.target.value)}
            />
            <label htmlFor="password">Password:</label>
          </div>
          <button type="submit" className="btn">Login</button>
          <div className="login-option">
            <button><a onClick={handleWithOtp}>Login With OTP</a></button>
          </div>
          <div className="forget-pass">
            <p>
              Forgot password? <a href="#" onClick={handleReset}>Reset</a>
            </p>
          </div>
          <div className="signup-link">
            <h3>New student</h3>
            <button type="button" className="btn" onClick={handleRegister}>Register</button>
          </div>
        </form>
      </div>
      {Array.from({ length: 50 }).map((_, i) => (
        <span key={i} style={{ '--i': i + 1 }}></span>
      ))}
    </div>
  );
};

export default LoginScreen;


@import url('https://fonts.googleapis.com/css2?family=PT+Serif:ital@1&family=Poppins:wght@200&family=Roboto+Slab:wght@300;500&family=Roboto:wght@300&display=swap');

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
}

body {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: #222;
}

.container {
  display: flex;
  position: relative;
  height: 256px;
  width: 256px;
  justify-content: center;
  align-items: center;
}

.container span {
  position: absolute;
  left: 0;
  width: 33px;
  height: 6px;
  background: #333;
  border-radius: 5px;
  transform-origin: 129px;
  transform: scale(2.2) rotate(calc(var(--i) * (360deg / 50)));
  animation: animate 2s linear infinite;
  animation-delay: calc(var(--i) * (4s / 50));
}

@keyframes animate {
  0% {
    background: rgb(81, 255, 0);
  }
  100% {
    background: #333;
  }
}

.login-box {
  position: absolute;
  width: 400px;
  background: rgba(0, 0, 0, 0.7);
  padding: 30px;
  border-radius: 10px;
}

.login-box form {
  width: 100%;
}

h1 {
  font-size: 2em;
  color: rgb(81, 255, 0);
  font-weight: bold;
  text-align: center;
  margin-bottom: 20px;
}

.input-box {
  position: relative;
  margin: 25px 0;
}

.login-box input {
  width: 100%;
  height: 50px;
  background: transparent;
  border: 2px solid #333;
  border-radius: 40px;
  transition: 0.5s ease;
  outline: none;
  padding: 0 20px;
  color: #fff;
  font-weight: 700;
}

.login-box input:focus ~ label,
.login-box input:valid ~ label {
  top: -10px;
  font-size: 0.8em;
  background: #222;
  padding: 0 6px;
  color: rgb(81, 255, 0);
  font-weight: 600;
}

.login-box input:focus,
.login-box input:valid {
  border: 2px solid rgb(81, 255, 0);
}

.login-box label {
  position: absolute;
  top: 50%;
  left: 20px;
  transform: translateY(-50%);
  font-size: 1em;
  color: #fff;
  cursor: pointer;
  pointer-events: none;
  transition: 0.5s ease;
  font-weight: 700;
}

.forget-pass {
  margin: -15px 0 10px;
  text-align: center;
}

.forget-pass a {
  font-size: 0.8em;
  color: #fff;
  text-decoration: none;
}

.forget-pass a:hover {
  text-decoration: underline;
}

.btn {
  width: 100%;
  height: 40px;
  background: rgb(81, 255, 0);
  border: none;
  outline: none;
  border-radius: 40px;
  cursor: pointer;
  font-size: 1.2em;
  color: #222;
  font-weight: 800;
}

.signup-link {
  margin: 20px 10px 10px;
  text-align: center;
}

.signup-link a {
  color: rgb(81, 255, 0);
  font-weight: 600;
  text-decoration: none;
}

.signup-link a:hover {
  text-decoration: underline;
}

.login-option {
  margin-top: 20px;
  text-align: center;
  font-size: 1em;
  color: #fff;
}



import React, { useEffect, useState } from 'react';
import { useLocation } from 'react-router-dom';
import axios from 'axios';
import '../cssfolder/Payments.css'; // Import the CSS file

function Payments() {
  const location = useLocation();
  const { course, plan, totalAmount } = location.state || {};
  const [paymentData, setPaymentData] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    // Fetch payment data
    const fetchPayments = async () => {
      try {
        const response = await axios.get('http://127.0.0.1:8000/api/payments/', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}` // Token-based authentication
          }
        });
        setPaymentData(response.data);
        
      } catch (error) {
        setError('Error fetching payments: ' + error.message);
      }
    };

    fetchPayments();
    

    // Save payment data
    const savePayment = async () => {
      try {
        await axios.post('http://127.0.0.1:8000/api/payments/', {
          course_title: course?.title,
          plan_name: plan?.name,
          total_amount: totalAmount,
        }, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}` // Token-based authentication
          }
        });
        
      } catch (error) {
        setError('Error saving payment: ' + error.message);
      }
    };

    savePayment();
  }, [course, plan, totalAmount]);

  return (
    <div className="payments-container">
      <h2>Payment Summary</h2>
      <div className="course-details">
        <img src={`http://127.0.0.1:8000${course?.mentor?.image}`} alt="Mentor Image" />
        <p><b>Mentor:</b> {course?.mentor?.name}</p>
        <h3>{course?.title}</h3>
        <p><b>Plan:</b> {plan?.name}</p>
        <p><b>Total Amount:</b> ₹ {totalAmount?.toFixed(2)}/-</p>
        {error && <p style={{ color: 'red' }}>{error}</p>}
      </div>
      <div className="payment-history">
        <h3>Payment History</h3>
        {paymentData ? (
          <ul>
            {paymentData.map(payment => (
              <li key={payment.id}>
                <p><b>Course Title:</b> {payment.course_title}</p>
                <p><b>Plan Name:</b> {payment.plan_name}</p>
                <p><b>Total Amount:</b> ₹ {payment.total_amount.toFixed(2)}</p>
                <p><b>Date:</b> {new Date(payment.created_at).toLocaleDateString()}</p>
              </li>
            ))}
          </ul>
        ) : (
          <p>No payment data available.</p>
        )}
      </div>
    </div>
  );
}

export default Payments;


import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

function ChatApp() {
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState('');
    const [file, setFile] = useState(null);
    const [isListening, setIsListening] = useState(false);
    const recognitionRef = useRef(null);
    const navigate = useNavigate();
    const userId = 'user_unique_id'; // Obtain this ID from your authentication logic

    useEffect(() => {
        fetchMessages();

        if ('webkitSpeechRecognition' in window) {
            const recognition = new window.webkitSpeechRecognition();
            recognition.continuous = false;
            recognition.interimResults = false;
            recognition.lang = 'en-US';

            recognition.onresult = (event) => {
                const speechToText = event.results[0][0].transcript;
                setNewMessage((prevMessage) => prevMessage + ' ' + speechToText);
            };

            recognition.onend = () => {
                setIsListening(false);
            };

            recognitionRef.current = recognition;
        } else {
            alert('Your browser does not support speech recognition.');
        }
    }, []);

    const fetchMessages = async () => {
        try {
            const response = await axios.get('http://127.0.0.1:8000/messages/');
            setMessages(response.data);
        } catch (error) {
            console.error('Error fetching messages:', error);
        }
    };

    const handleSendMessage = async () => {
        const formData = new FormData();
        if (newMessage.trim() !== '') {
            formData.append('text', newMessage);
            formData.append('type', 'text');
            formData.append('user_id', userId); // Include user ID
            setNewMessage('');
        }
        if (file) {
            formData.append('file', file);
            formData.append('type', 'file');
            formData.append('user_id', userId); // Include user ID
            setFile(null);
        }

        try {
            await axios.post('http://127.0.0.1:8000/messages/', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
            });
            fetchMessages();
        } catch (error) {
            console.error('Error sending message:', error);
        }
    };

    const handleMicrophoneClick = () => {
        const recognition = recognitionRef.current;
        if (recognition) {
            if (isListening) {
                recognition.stop();
            } else {
                setIsListening(true);
                recognition.start();
            }
        } else {
            alert('Speech recognition is not supported in your browser.');
        }
    };

    const handleBroadcast = () => {
        navigate('/broadcast');
    };

    const handleBack = () => {
        navigate(-1);
    };

    return (
        <div className="chat-app">
            <button onClick={handleBack} id='backbutton'><svg xmlns="http://www.w3.org/2000/svg" width="30" height="40" fill="currentColor" className="bi bi-chevron-double-left" viewBox="0 0 16 16">
                <path fillRule="evenodd" d="M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0"/>
                <path fillRule="evenodd" d="M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0"/>
            </svg></button>
            <div className="chat-header">
                <h2>Chats</h2>
                <button onClick={handleBroadcast}>Broad Cast</button>
            </div>
            <div className="chat-body">
                {messages.map((message, index) => (
                    <div key={index} className="message">
                        {message.type === 'text' ? (
                            <p>{message.text}</p>
                        ) : (
                            <a href={message.file} download>
                                {message.file}
                            </a>
                        )}
                    </div>
                ))}
            </div>
            <div className="chat-footer">
                <input
                    type="text"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    placeholder="Type a message..."
                />
                <input
                    type="file"
                    onChange={(e) => setFile(e.target.files[0])}
                    style={{ display: 'none' }}
                    id="file-input"
                />
                <label htmlFor="file-input" className="file-label">
                    Choose File
                </label>
                <button
                    id="mic"
                    className={isListening ? 'active' : ''}
                    onClick={handleMicrophoneClick}
                >
                    <i className="fas fa-microphone"></i>🎙️
                </button>
                <button onClick={handleSendMessage}>Send</button>
            </div>
        </div>
    );
}

export default ChatApp;

